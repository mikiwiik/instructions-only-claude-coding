name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  pull-requests: write

jobs:
  commitlint:
    name: Commit Lint
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history to validate all PR commits

      - name: Validate PR commits
        uses: wagoid/commitlint-github-action@v6
        with:
          configFile: commitlint.config.js

  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        node-version: [22.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Security Audit
      run: npm audit --audit-level=moderate
      continue-on-error: true

    - name: Generate Security Audit Report
      if: matrix.os == 'ubuntu-latest' && matrix.node-version == '22.x'
      run: |
        mkdir -p reports
        npm audit --json > reports/audit-report.json || true
        echo "## NPM Audit Report" > reports/audit-summary.md
        echo "" >> reports/audit-summary.md
        npm audit >> reports/audit-summary.md || true

    - name: Upload Security Audit Report
      uses: actions/upload-artifact@v4
      if: matrix.os == 'ubuntu-latest' && matrix.node-version == '22.x'
      with:
        name: security-audit-report
        path: reports/
        retention-days: 30

    - name: Run type checking
      run: npm run type-check

    - name: Run linting
      run: npm run lint

    - name: Run tests with coverage
      run: npm run test:coverage

    - name: Coverage Threshold Check
      if: matrix.os == 'ubuntu-latest' && matrix.node-version == '22.x'
      run: |
        COVERAGE=$(node -p "Math.round(JSON.parse(require('fs').readFileSync('./coverage/coverage-summary.json')).total.lines.pct)")
        echo "Coverage: ${COVERAGE}%"
        if [ $COVERAGE -lt 90 ]; then
          echo "❌ Coverage ${COVERAGE}% is below 90% threshold"
          exit 1
        else
          echo "✅ Coverage ${COVERAGE}% meets 90% threshold"
        fi

    - name: Jest Coverage Comment
      uses: MishaKav/jest-coverage-comment@main
      if: github.event_name == 'pull_request' && matrix.os == 'ubuntu-latest' && matrix.node-version == '22.x'
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        coverage-summary-path: ./coverage/coverage-summary.json
        junitxml-path: ./coverage/junit.xml
        junitxml-title: Test Results

    - name: Build application
      run: npm run build

    - name: SonarCloud Analysis
      uses: SonarSource/sonarqube-scan-action@0303d6b62e310685c0e34d0b9cde218036885c4d
      if: matrix.os == 'ubuntu-latest' && matrix.node-version == '22.x'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: matrix.os == 'ubuntu-latest' && matrix.node-version == '22.x'
      with:
        name: coverage-report
        path: |
          coverage/
          !coverage/.nyc_output
        retention-days: 30

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: matrix.os == 'ubuntu-latest' && matrix.node-version == '22.x'
      with:
        name: build-artifacts
        path: |
          .next/
          !.next/cache/
        retention-days: 7
  build-summary:
      name: Build and Test
      runs-on: ubuntu-latest
      needs: build
      if: always()

      steps:
      - name: Check build matrix success
        run: |
          if [[ "${{ needs.build.result }}" == "success" ]]; then
            echo "All build matrix jobs completed successfully"
            exit 0
          else
            echo "One or more build matrix jobs failed"
            exit 1
          fi
